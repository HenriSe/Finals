import random
import sys
import time

import keras.utils.np_utils
import numpy as np
import tensorflow as tf
from keras.callbacks import TensorBoard
from keras.layers import Dense, Activation, Flatten, Conv2D, MaxPooling2D
from keras.models import Sequential

import andmete_hankimine

# Kasutasin try/catchi, äkki leiab errori
try:
    # Kirjutab mulle välja süsteemide versioonid
    print("python version: ", sys.version)
    print("tensorflow version: ", tf.__version__)
    print(f"Keras Version: {tf.keras.__version__}")
    # Kirjutab välja kas leidis üles GPU
    print("GPU is", "available" if tf.config.list_physical_devices('GPU') else "NOT AVAILABLE")

    # https://stackoverflow.com/questions/50304156/tensorflow-allocation-memory-allocation-of-38535168-exceeds-10-of-system-memor
    # os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'

    # Tensorboard logi jaoks - tekitan eraldi mudeli logi
    # logide leidmise jaoks on vaja command promtis kirjutada välja tensorboard asukoha
    # C:\Users\Henri\Desktop\loputoo\anaconda>tensorboard --logdir=logs/
    # copy-paste localhost aadress browserisse
    NAME = "Duchenne-1-{}".format(int(time.time()))
    tensorboard = TensorBoard(log_dir='logs/{}'.format(NAME), histogram_freq=1, embeddings_freq=1)


############## ANDMETE HANKIMINE JA TÖÖTLEMINE ######################

    # datadir = r'C:\Users\Henri\Desktop\lõputöö\tester_pildid'
    # siin asuvad kaustad, kus on pildid with fake\real
    datadir = r"C:\Users\Henri\Desktop\loputoo\tester_pildid"

    kaustad = ["fake_smile", "real_smile"]

    # hangin jadasse pildid
    img_size = 224
    andmed = andmete_hankimine.hangi_andmed(img_size)

    print("\nTreening andmete pikkus: ", len(andmed))

    # segame piltide järjekorra
    random.shuffle(andmed)

    # suur X-ga thäistatakse tavaliselt piltide andmed
    X = []
    # suur Y-ga tähistatakse tavaliselt andmete sildid (labels)
    Y = []

    for fn, sildid in andmed:
        X.append(fn)
        Y.append(sildid)

    # muudame jada kuju 3D-ks, et oleks hõlpam jaotada andmeid ja neile ligi pääseda
    X = np.array(X).reshape(-1, img_size, img_size, 1)  # shape on (62, 224, 224, 1)
    Y = np.array(Y)

    # Kontrollime jadade pikkusied kas need ühitvad andmete jada pikkusega
    print("X pikkus:", len(X))
    print("Y pikkus:", len(Y))

    # salvestan vahepeal data ära numpy file
    np.save('test_data_x', X)
    np.save('test_data_y', Y)
    # print(np.load('test_data_x.npy'))

    # andmete normaliseerimine
    # pildiandmete suuruse muutmine max value peale - 255
    # läheb hetkel vastuollu algse pildi suuruse määramisega - TODO change this
    # kerase sissehitatud funktsioon
    X = keras.utils.np_utils.normalize(X)

############# MUDELI EHITUS #####################

    # Laeme sisse erinevad kihid
    model = Sequential()
    model.add(Conv2D(64, (3, 3), input_shape=X.shape[1:]))  # learn what this is
    model.add(Activation("relu"))  # activation layer of rectified linear
    model.add(MaxPooling2D(pool_size=(2, 2)))

    # teeme seda uuesti, ilma input shape
    model.add(Conv2D(64, (3, 3)))  # learn what this is
    model.add(Activation("relu"))  # activation layer of rectified linear
    model.add(MaxPooling2D(pool_size=(2, 2)))

    # flatten data sest convulation on 2D aga Dense layer 1D
    model.add(Flatten())

    # "for good measure" viimane kiht dense 64 node-ga
    model.add(Dense(64))
    model.add(Activation('relu'))

    # output layer
    model.add(Dense(1))

    # activation layer
    model.add(Activation('sigmoid'))

    # loss="categorical" - teine variant
    # ette antud mudeli parameetride mille järgi mudel treenib ning mida jälgib
    model.compile(loss="binary_crossentropy", optimizer="adam", metrics=['accuracy'])

    # annab meile mudeli hetkese info kihtide kohta
    model.summary()

    # data size scale with data, tavaliselt hea 20- kuni maybe 200
    # validation split, 0.1 = 10%
    # epochs - mitu käiku läbi treenimise
    model.fit(X, Y, batch_size=10, validation_split=0.1, epochs=10, callbacks=[tensorboard])

except Exception as e:
    print(e)


# TODO outout, iga kord sama error
"""
python version:  3.9.6 (tags/v3.9.6:db3ff76, Jun 28 2021, 15:26:21) [MSC v.1929 64 bit (AMD64)]
tensorflow version:  2.8.0
Keras Version: 2.8.0
GPU is available

train data len:  441 X array len: 441 Y array len: 441 2022-04-27 23:28:57.096375: I 
tensorflow/core/platform/cpu_feature_guard.cc:151] This TensorFlow binary is optimized with oneAPI Deep Neural 
Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX AVX2 To 
enable them in other operations, rebuild TensorFlow with the appropriate compiler flags. 2022-04-27 23:28:57.736123: 
I tensorflow/core/common_runtime/gpu/gpu_device.cc:1525] Created device /job:localhost/replica:0/task:0/device:GPU:0 
with 4634 MB memory:  -> device: 0, name: NVIDIA GeForce GTX 1060 with Max-Q Design, pci bus id: 0000:01:00.0, 
compute capability: 6.1 Epoch 1/10 2022-04-27 23:29:00.228890: I tensorflow/stream_executor/cuda/cuda_dnn.cc:368] 
Loaded cuDNN version 8303 

Process finished with exit code -1073740791 (0xC0000409)
"""
